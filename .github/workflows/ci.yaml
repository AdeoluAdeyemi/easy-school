name: Capstone CI-CD Workflow

#Events
on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1                   
  ECR_REPOSITORY: capstone_ecr_repo
  DOCKER_BUILD_DIR: ./
  DOCKER_FILE: Dockerfile

#Jobs
jobs:
  create:
    name: Create AWS Infrastructure with TF
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      #====================================#
      # Checkout repository into runner
      #====================================#
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: infra  # the branch that contains the Terraform code.

      #====================================#
      # Configure AWS credentials
      #====================================#
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #======================================#
      # Install Terraform and its dependencies
      #======================================#
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5
          

      #================================#
      # Dynamically create tfvars file
      #================================#
      - name: Generate tfvars file
        id: tfvars
        run: |
          touch prod.tfvars
          echo "aws_region = \"${{ env.AWS_REGION }}\"" >> prod.tfvars
          echo "aws_ecr_repo_name = \"${{ env.ECR_REPOSITORY }}\"" >> prod.tfvars

          cat prod.tfvars
        working-directory: infra/

      #=============================#
      # Terraform Init
      #=============================#
      - name: Terraform Init
        id: init
        run: terraform init   
        working-directory: infra/

      #=============================#
      # Terraform Validate.
      #=============================#
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infra/

      #===================================================#
      # Terraform Plan AWS VPC, & Other Resources Creation
      #===================================================#
      - name: Terraform Plan
        id: plan
        run: terraform plan  -var-file="prod.tfvars" -no-color
        working-directory: infra/
        continue-on-error: true

      #===================================================#
      # Terraform Apply Infrastructure Creation
      #===================================================#
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: infra/
        run: terraform apply  -var-file="prod.tfvars" -auto-approve
  
  build:      
    name: Build, tag, and push docker image

    runs-on: ubuntu-latest
    needs: create

    steps:
      #====================================#
      # Checkout repository into runner
      #====================================#
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: infra  # The branch that contains the Terraform code

      #====================================#
      # Configure AWS credentials
      #====================================#
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #========================================#
      # Build docker image 
      # and push to AWS ECR Repo
      #========================================#
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: "latest"
        run: |
          docker build "${{ env.DOCKER_BUILD_DIR }}" -f "${{ env.DOCKER_FILE }}" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      #=======================================================================#
      # Add a comment to the pull request to indicate the task was successful, 
      # and provide the details of the app url
      #=======================================================================#
      - name: Add comments to the PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-build.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GH_ACCESS_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
